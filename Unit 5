#include <bits/stdc++.h>
using namespace std;
struct MHN {
	char data;
	unsigned freq;
	MHN *left, *right;
	MHN(char data, unsigned freq)
	{
		left = right = NULL;
		this->data = data;
		this->freq = freq;
	}
};
struct compare {
	bool operator()(MHN* l, MHN* r)
	{
		return (l->freq > r->freq);
	}
};
void PC(struct MHN* root, string str)
{
	if (!root)
		return;
	if (root->data != '$')
		cout << root->data << ": " << str << "\n";
	PC(root->left, str + "0");
	PC(root->right, str + "1");
}
void HC(char data[], int freq[], int size)
{
	struct MHN *left, *right, *top;
	priority_queue<MHN*, vector<MHN*>, compare> minHeap;
	for (int i = 0; i < size; ++i)
		minHeap.push(new MHN(data[i], freq[i]));
	while (minHeap.size() != 1) {
		left = minHeap.top();
		minHeap.pop();
		right = minHeap.top();
		minHeap.pop();
		top = new MHN('$', left->freq + right->freq);
		top->left = left;
		top->right = right;
		minHeap.push(top);
	}
	PC(minHeap.top(), "");
}
int main()
{
	char arr[] = { 'a', 'b', 'c', 'd', 'e', 'f' };
	int freq[] = { 5, 9, 12, 13, 16, 45 };
	int size = sizeof(arr) / sizeof(arr[0]);
	HC(arr, freq, size);
	return 0;
}


